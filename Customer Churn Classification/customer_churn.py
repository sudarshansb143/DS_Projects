# -*- coding: utf-8 -*-
"""Customer_Churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MWdWb5yNvIDCqKpi55zM_TB5RMCa0b2
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import warnings as ws
ws.filterwarnings("ignore")

df = pd.read_csv("churn.csv")

df.head()

df.isna().sum()

X = df.drop("churn", axis = 1)
y = df["churn"].replace({"Yes": 1, "No" : 0})

X[["internationalplan", "voicemailplan"]] = X[["internationalplan", "voicemailplan"]].replace({"yes": 1, "no" : 0})

X.head()

sns.set()
plt.figure(figsize = (6,6))
sns.countplot(y, palette="plasma")
plt.show()

from imblearn.over_sampling import  RandomOverSampler
ros = RandomOverSampler(random_state=42)
X_ros, y_ros = ros.fit_sample(X, y)

temp= pd.Series(y_ros)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_ros,temp, random_state = 42, test_size = 42, stratify = temp)

# Fitting the Logistic Model
y_train.unique()

from sklearn.linear_model import LogisticRegression

logreg = LogisticRegression()
logreg.fit(X_train , y_train)

y_pred = logreg.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

print(accuracy_score(y_test, y_pred))

print(confusion_matrix(y_test, y_pred))

# Scaling data and then try

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scale_X_train = scaler.fit_transform(X_train)
scale_X_test = scaler.transform(X_test)

# again fitting the model
logreg1 = LogisticRegression()
logreg1.fit(scale_X_train, y_train)

y_pred1 = logreg1.predict(scale_X_test)

print(accuracy_score(y_test, y_pred1))

print(confusion_matrix(y_test, y_pred1))

# using more strong model

from sklearn.svm import SVC

svm = SVC()
svm.fit(scale_X_train, y_train)

y_svm_pred = svm.predict(scale_X_test)

print(accuracy_score(y_test, y_svm_pred))

conf = confusion_matrix(y_test, y_svm_pred)
print(conf)

sns.set()
sns.heatmap(conf, annot = True, fmt= ".2g")
plt.show()

